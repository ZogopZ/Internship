#!/bin/bash
source /home/zois/Documents/classified/Utility-links/tools	# Include tools in this file.
trustRemote

# Redmine's remote repository download. https://svn.redmine.org/redmine/branches/
read -p "$(echo -e "${UserDim}user       |${User} Please paste here the latest (or needed) SVN repository...:")" svnRepo
echo -e "${InternetDim}Downloading| ...${Internet}"
checkoutText=$(ssh $remote sudo svn checkout --trust-server-cert --non-interactive $svnRepo | grep -e "Checked out revision")
revision=$(echo $checkoutText | sed 's/[^0-9]*//g')
oldRepo="/var/www/html/redmine"
standardRepo="/var/www/html/redmine"
newRepo=$(ssh $remote ls | grep -e "-stable")

echo -e "${UserDim}User       |${User} Setting up directories and files...${Color_Off}"
echo -e "${UserDim}User       |${User}  -This will move the downloaded version to path /var/www/html/ and rename it to redmine.new${Color_Off}"
echo -e "${UserDim}User       |${User}  -This will copy owner properties from previous redmine version to the new one.${Color_Off}"
echo -e "${UserDim}User       |${User}  -This will copy needed /config/database.yml and /public/themes/neurosoft files from previous version.${Color_Off}"

choice="invalid"
while [ $choice = "invalid" ]
do
	read -p "$(echo -e "${UserDim}user	   |${User} Would you like to continue (y/n)? ")" choice
	case "$choice" in
		y|Y )  echo -e "${UserDim}User       |${User} A very wise choice...${Color_Off}"
	   	ssh $remote touch ${newRepo}/revision.${revision}  		# Create a revision file. It's name will be the revision number of redmine's version.
                echo 1
	   	ssh $remote mv $newRepo /var/www/html/		   		# Move downloaded redmine's version to /var/www/html directory.
                echo 2
	   	ssh $remote mv /var/www/html/$newRepo /var/www/html/redmine.new	# Rename downloaded version to redmine.new
                echo 3
	   	newRepo="/var/www/html/redmine.new"
		echo 4
		ssh $remote sudo cp -r $oldRepo/public/themes/neurosoft $newRepo/public/themes
		echo 4.1
		ssh $remote cp $oldRepo/config/database.yml $newRepo/config/database.yml                # Copy previous redmine's database configuration to the new version.
                echo 4
	   	ssh $remote chown -R --reference $oldRepo $newRepo	# Copy owner right and options from pre-existing redmine version.
									# Redmine directory and contents must belong to apache:apache
									# If not administration->settings is not displayed properly.
		#echo 5.1
		#ssh $remote mkdir $newRepo/public/themes/neurosoft
                #echo 5.2
		#ssh $remote mkdir $newRepo/public/themes/neurosoft/images
                #echo 5.3
		#ssh $remote mkdir $newRepo/public/themes/neurosoft/javascripts
                #echo 5.4
		#ssh $remote mkdir $newRepo/public/themes/neurosoft/stylesheets
                #echo 6
	   	#ssh $remote cp $oldRepo/public/themes/neurosoft/images/RedTeamLogo.png $newRepo/public/themes/neurosoft/images/
		#echo 6.1
                #ssh $remote cp $oldRepo/public/themes/neurosoft/javascripts/theme.js $newRepo/public/themes/neurosoft/javascripts/theme.js
                #echo 6.2
                #ssh $remote cp $oldRepo/public/themes/neurosoft/stylesheets/application.css $newRepo/public/themes/neurosoft/stylesheets/application.css
                echo 7
	   	echo -e "${BackupDim}Back-up    |${Backup} Backing up previous Redmine version...${Color_Off}"
	   	read -p "$(echo -e "${BackupDim}Back-up	   |${Backup} Please attach a label to the Redmine backup directory...:")" label
	   	previousRevisionFile=$(ssh $remote ls $oldRepo | grep -e "revision")
                echo 8
	   	previousRevisionNumber=$(echo "${previousRevisionFile##*.}")
                echo 9
	   	oldRepoNewName="${oldRepo}Old\(${label}\).${previousRevisionNumber}"	# Create a new name for the old redmine version with a label.
                echo 10
	   	ssh $remote mv $oldRepo $oldRepoNewName					# Back it up.
                echo 11
	   	ssh $remote mv $newRepo redmine						# Switch redmine to new version.
                echo 12
	   	echo -e "${BackupDim}Back-up    |${Backup} Backup completed in directory ${oldRepoNewName}${Color_Off}"
	   	echo -e "${UserDim}User       |${User} Performing database migration. Please wait...${Color_Off}"
		gem="/var/www/html/redmine/Gemfile"
		rake="/var/www/html/redmine/Rakefile"
		ssh $remote gem install bundler --install-dir $standardRepo
		ssh $remote bundle install --gemfile=$gem
		ssh $remote rake -f $rake generate_secret_token
		ssh $remote RAILS_ENV=production REDMINE_LANG=en rake -f $rake db:migrate
		ssh $remote RAILS_ENV=production rake -f $rake redmine:load_default_data
	   #bundle install --without development test
 	   #bundle exec rake generate_secret_token
	   #RAILS_ENV=production REDMINE_LANG=en bundle exec rake db:migrate
	   #RAILS_ENV=production bundle exec rake redmine:load_default_data
	   	echo -e "${UserDim}User       |${User} Restarting apache. Please wait...${Color_Off}"
	   	systemctl restart httpd
	   	echo -e "${UserDim}User       |${UserBold} ---Success---${Color_Off}";;
    	n|N ) echo -e "${UserDim}User       |${User} Cancelling...${Color_Off}";;
      	* )  choice="invalid"
           	echo -e "${UserDim}User       |${User} Invalid selection. Please type y or n to continue...${Color_Off}";;
	esac
done





#echo $(sudo chmod +w files log tmp tmp/pdf public/plugin_assets)


